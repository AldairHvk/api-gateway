spring.application.name=api-gateway

##Esta config es igual a la anotacion EnableDiscoveryClient
spring.cloud.gateway.discovery.locator.enabled=true

##Instance id unico 
eureka.instance.instance-id=${spring.application.name}:${random.uuid}

##Deshabilita la estrategia predeterminada de balanceo
spring.cloud.loadbalancer.ribbon.enabled=false

########Ruteo dinamico###########


##definir routes (Contienen url a donde se enviara la peticion por parte del api Gateway)
spring.cloud.gateway.routes[0].id=spring-microservice-product
spring.cloud.gateway.routes[0].uri=lb://SPRING-MICROSERVICE-PRODUCT
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/products/**, /api/categories/**

spring.cloud.gateway.routes[1].id=spring-microservice-booking
spring.cloud.gateway.routes[1].uri=lb://SPRING-MICROSERVICE-BOOKING
spring.cloud.gateway.routes[1].predicates=Path=/api/booking/**


################## Keycloak - Product microservice ########################  

####Donde un consumidor de OAUTH2 actua como cliente y reenvia el cliente a la solicitud del cliente saliente product microservice
spring.cloud.gateway.default-filters=TokenRelay

#################################Conexion con Keycloak#######################################

##Keycloak issuer
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:9090/realms/mycompany-microservice-realm

##Definimos el client id
spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-id=spring-cloud-gateway-client

##Definimos el secret
spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-secret=AYT8WWD5RiTXTtrce03d0HtOXtvglAD5

##Definimos el proveedor
spring.security.oauth2.client.registration.spring-cloud-gateway-client.provider=keycloak

##Definimos el mecanismo de autorizacion que usaremos
spring.security.oauth2.client.registration.spring-cloud-gateway-client.authorization-grant-type=authorization_code

##Tomar el valor de redireccion cuando el inicio de sesion sea satisfactorio
spring.security.oauth2.client.registration.spring-cloud-gateway-client.redirect-uri=http://localhost:8080/login/oauth2/code/spring-cloud-gateway-client


##Se agregaron las configuraciones para el correcto funcionamiento de los beans y autenticacion con keycloak
spring.main.allow-bean-definition-overriding=true

spring.security.oauth2.client.registration.spring-cloud-gateway-client.scope=openid


